#include <iostream>
#include <stack>
#include <unordered_map>
#include <string>
#include <sstream>
#include <iomanip>
using namespace std;

bool isOperator(const string& token) {
    return (token == "+" || token == "-" || token == "*" || token == "/");
}

int precedence(const string& token) {
    if (token == "+" || token == "-") {
        return 1;
    } else if (token == "*" || token == "/") {
        return 2;
    }
    return 0;
}

double calculateExpression(const string& expression, const unordered_map<string, double>& variables) {
    stack<double> operandStack;

    stringstream ss(expression);
    string token;
    while (ss >> token) {
        if (isOperator(token)) {
            double operand2 = operandStack.top();
            operandStack.pop();
            double operand1 = operandStack.top();
            operandStack.pop();

            if (token == "+") {
                operandStack.push(operand1 + operand2);
            } else if (token == "-") {
                operandStack.push(operand1 - operand2);
            } else if (token == "*") {
                operandStack.push(operand1 * operand2);
            } else if (token == "/") {
                operandStack.push(operand1 / operand2);
            }
        } else if (variables.count(token) > 0) {
            operandStack.push(variables.at(token));
        } else {
            double operand;
            try {
                operand = stod(token);
            } catch (const exception& e) {
                cout << "Invalid token: " << token << endl;
                return 0.0;
            }
            operandStack.push(operand);
        }
    }

    if (!operandStack.empty()) {
        return operandStack.top();
    }
    return 0.0;
}

string convertToRPN(const string& infixExpression) {
    stringstream ss(infixExpression);
    stack<string> operatorStack;
    string output;

    string token;
    while (ss >> token) {
        if (isOperator(token)) {
            while (!operatorStack.empty() && isOperator(operatorStack.top()) && precedence(operatorStack.top()) >= precedence(token)) {
                output += operatorStack.top() + " ";
                operatorStack.pop();
            }
            operatorStack.push(token);
        } else if (token == "(") {
            operatorStack.push(token);
        } else if (token == ")") {
            while (!operatorStack.empty() && operatorStack.top() != "(") {
                output += operatorStack.top() + " ";
                operatorStack.pop();
            }
            if (!operatorStack.empty() && operatorStack.top() == "(") {
                operatorStack.pop();
            }
        } else {
            output += token + " ";
        }
    }

    while (!operatorStack.empty()) {
        output += operatorStack.top() + " ";
        operatorStack.pop();
    }

    return output;
}

int main() {
    unordered_map<string, double> variables;
    variables["a"] = 0.8;
    variables["b"] = 4.1;
    variables["c"] = 7.9;
    variables["d"] = 6.2;
    variables["e"] = 3.5;

    string infixExpression = "(a+b)*(c-d)/e";

    string rpnExpression = convertToRPN(infixExpression);
    cout << "Reverse Polish Notation (RPN): " << rpnExpression << endl;

    double result = calculateExpression(rpnExpression, variables);
    cout << "Result: " << fixed << setprecision(2) << result << endl;

    return 0;
}
