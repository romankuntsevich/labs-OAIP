#include <iostream>
#include <vector>
#include <list>
#include <random>
using namespace std;

// Структура для хранения элемента хеш-таблицы
struct HashEntry {
    int key;
    int value;
};

class HashTable {
private:
    vector<list<HashEntry>> table; // Хеш-таблица

public:
    HashTable(int size) {
        table.resize(size);
    }

    void insert(int key, int value) {
        int index = hashFunction(key);

        // Проверяем, есть ли элемент с таким ключом в списке
        for (const HashEntry& entry : table[index]) {
            if (entry.key == key) {
                cout << "Element with key " << key << " already exists." << endl;
                return;
            }
        }

        HashEntry newEntry;
        newEntry.key = key;
        newEntry.value = value;
        table[index].push_back(newEntry);
    }

    bool search(int key, int& value) {
        int index = hashFunction(key);

        // Поиск элемента в списке
        for (const HashEntry& entry : table[index]) {
            if (entry.key == key) {
                value = entry.value;
                return true;
            }
        }

        return false;
    }

    void displayTable() {
        for (int i = 0; i < table.size(); i++) {
            cout << "Index " << i << ": ";
            for (const HashEntry& entry : table[i]) {
                cout << "(" << entry.key << ", " << entry.value << ") ";
            }
            cout << endl;
        }
    }

private:
    int hashFunction(int key) {
        return key % table.size();
    }
};

int main() {
    const int n = 12; // Количество элементов в исходном массиве
    const int rangeStart = 24000;
    const int rangeEnd = 54000;
    const int M = 10; // Размер хеш-таблицы

    // Инициализация генератора случайных чисел
    random_device rd;
    mt19937 rng(rd());
    uniform_int_distribution<int> uni(rangeStart, rangeEnd);

    // Создание и заполнение исходного массива
    int array[n];
    for (int i = 0; i < n; i++) {
        array[i] = uni(rng);
    }

    // Вывод исходного массива
    cout << "Original Array: ";
    for (int i = 0; i < n; i++) {
        cout << array[i] << " ";
    }
    cout << endl;

    // Создание и заполнение хеш-таблицы
    HashTable hashTable(M);
    for (int i = 0; i < n; i++) {
        hashTable.insert(array[i], i);
    }

    // Вывод хеш-таблицы
    cout << "Hash Table:" << endl;
    hashTable.displayTable();

    // Поиск элемента в хеш-таблице
    int keyToSearch = array[0]; // Ищем первый элемент массива
    int value;
    if (hashTable.search(keyToSearch, value)) {
        cout << "Element with key " << keyToSearch << " found. Value: " << value << endl;
    } else {
        cout << "Element with key " << keyToSearch << " not found." << endl;
    }

    return 0;
}
